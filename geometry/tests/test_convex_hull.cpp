#include <bits/stdc++.h>
#include "../../utils/debug_out.hpp"
#include "../convex_hull.hpp"
#include "../geometry_utils.hpp"

using namespace std;
typedef long long int ll;
typedef double R;

void test_convex_hull_2d()
{
    int n;
    cin>>n;
    vector<point<R,2>> p(n);
    vector<int> chp;
    for(int i=0;i<n;i++)
    {
        cin>>p[i].x[0]>>p[i].x[1];
    }
    debug(p);
    convex_hull_2d(p,chp);
    debug(get_subset_of_points(p,chp));

}

int main()
{
    test_convex_hull_2d();
    return 0;
}


/*

harshald@DESKTOP-D3B1M51:/mnt/c/Users/harshal d/_CODE/CP/my_lib$ ./a.out
8 7 7 7 -7 -7 -7 -7 7 9 0 -9 0 0 9 0 -9

# p = [ (7, 7), (7, -7), (-7, -7), (-7, 7), (9, 0), (-9, 0), (0, 9), (0, -9), ]
# p[org] = (-9, 0)
# angle = [ 0.41241, -0.41241, -1.2925, 1.2925, 0, -5, 0.785398, -0.785398, ]
# order = [ 5, 2, 7, 1, 4, 0, 6, 3, 5, ]
# chp = [ (-9, 0), (-7, 7), (0, 9), (7, 7), (9, 0), (7, -7), (0, -9), (-7, -7), ]
harshald@DESKTOP-D3B1M51:/mnt/c/Users/harshal d/_CODE/CP/my_lib$ 
harshald@DESKTOP-D3B1M51:/mnt/c/Users/harshal d/_CODE/CP/my_lib$ ./a.out
16 7 7 7 -7 -7 -7 -7 7 9 0 -9 0 0 9 0 -9 0 0 1 2 -2 1 -1 -1 3 4 4 3 -5 4 6 5
# p = [ (7, 7), (7, -7), (-7, -7), (-7, 7), (9, 0), (-9, 0), (0, 9), (0, -9), (0, 0), (1, 2), (-2, 1), (-1, -1), (3, 4), (4, 3), (-5, 4), (6, 5), ]
# p[org] = (-9, 0)
# angle = [ 0.41241, -0.41241, -1.2925, 1.2925, 0, -5, 0.785398, -0.785398, 0, 0.197396, 0.141897, -0.124355, 0.321751, 0.226799, 0.785398, 0.321751, ]
# order = [ 5, 2, 7, 1, 11, 4, 10, 9, 13, 15, 0, 6, 3, 5, ]
# chp = [ (-9, 0), (-7, 7), (0, 9), (7, 7), (9, 0), (7, -7), (0, -9), (-7, -7), ]
harshald@DESKTOP-D3B1M51:/mnt/c/Users/harshal d/_CODE/CP/my_lib$ ./a.out
72 0 0 1 2 -2 1 -1 -1 3 4 4 3 -5 4 6 5 7 7 7 -7 -7 -7 -7 7 9 0 -9 0 0 9 0 -9 -8 0 8 0 -7 0 7 0 -6 0 6 0 -5 0 5 0 -4 0 4 0 -3 0 3 0 -2 0 2 0 -1 0 1 0 0 -8 0 8 0 -7 0 7 0 -6 0 6 0 -5 0 5 0 -4 0 4 0 -3 0 3 0 -2 0 2 0 -1 0 1 1 1 2 2 3 3 4 4 5 5 6 6 1 -1 2 -2 3 -3 4 -4 5 -5 6 -6 -1 1 -2 2 -3 3 -4 4 -5 5 -6 6 -1 -1 -2 -2 -3 -3 -4 -4 -5 -5 -6 -6
# p = [ (0, 0), (1, 2), (-2, 1), (-1, -1), (3, 4), (4, 3), (-5, 4), (6, 5), (7, 7), (7, -7), (-7, -7), (-7, 7), (9, 0), (-9, 0), (0, 9), (0, -9), (-8, 0), (8, 0), (-7, 0), (7, 0), (-6, 0), (6, 0), (-5, 0), (5, 0), (-4, 0), (4, 0), (-3, 0), (3, 0), (-2, 0), (2, 0), (-1, 0), (1, 0), (0, -8), (0, 8), (0, -7), (0, 7), (0, -6), (0, 6), (0, -5), (0, 5), (0, -4), (0, 4), (0, -3), (0, 3), (0, -2), (0, 2), (0, -1), (0, 1), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (1, -1), (2, -2), (3, -3), (4, -4), (5, -5), (6, -6), (-1, 1), (-2, 2), (-3, 3), (-4, 4), (-5, 5), (-6, 6), (-1, -1), (-2, -2), (-3, -3), (-4, -4), (-5, -5), (-6, -6), ]
# p[org] = (-9, 0)
# angle = [ 0, 0.197396, 0.141897, -0.124355, 0.321751, 0.226799, 0.785398, 0.321751, 0.41241, -0.41241, -1.2925, 1.2925, 0, -5, 0.785398, -0.785398, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.726642, 0.726642, -0.661043, 0.661043, -0.588003, 0.588003, -0.507099, 0.507099, -0.418224, 0.418224, -0.321751, 0.321751, -0.218669, 0.218669, -0.110657, 0.110657, 0.0996687, 0.179853, 0.244979, 0.298499, 0.343024, 0.380506, -0.0996687, -0.179853, -0.244979, -0.298499, -0.343024, -0.380506, 0.124355, 0.2783, 0.463648, 0.674741, 0.896055, 1.10715, -0.124355, -0.2783, -0.463648, -0.674741, -0.896055, -1.10715, ]
# order = [ 13, 10, 71, 70, 15, 32, 69, 34, 36, 38, 68, 40, 9, 59, 58, 42, 57, 67, 56, 44, 55, 3, 46, 54, 12, 48, 47, 60, 2, 49, 1, 45, 5, 50, 61, 51, 7, 52, 53, 8, 41, 62, 39, 37, 35, 63, 33, 14, 64, 65, 11, 13, ]
# chp = [ (-9, 0), (-7, 7), (0, 9), (7, 7), (9, 0), (7, -7), (0, -9), (-7, -7), ]


*/